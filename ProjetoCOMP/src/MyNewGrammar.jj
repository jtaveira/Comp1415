PARSER_BEGIN(Exemplo)
// código Java que invoca o parser
public class Exemplo {
 public static void main(String args[]) throws ParseException {
// criação do objecto utilizando o constructor com argumento para
// ler do standard input (teclado)
 Exemplo parser = new Exemplo(System.in);
 parser.ReadJSON();

 
 }
}
PARSER_END(Exemplo)
// símbolos que não devem ser considerados na análise
SKIP :
{
" " | "\t" | "\r"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
< INTEGER : (["0" - "9"])+ >
| < IDENTIFIER : (["a" - "z", "A" - "Z", ".", "0" - "9"] )+ >
| < LF : "\n" >
}
// definição da produção
void ReadJSON() : {Token t1,t2,t3,t4,t5;}
{  "{" <LF>
  		"\"nodes\":[" <LF>
  				("{\"name\":\""t1=<IDENTIFIER> {System.out.print("Name: " + t1.image);}
  				"\",\"group\":"t2=<INTEGER>{System.out.println("\t\t\t Group: " + t2.image);}"}," <LF> )*
			   //"{\"name\":\""<IDENTIFIER>"\",\"group\":"<INTEGER>"}"  <LF>
   		"],"<LF>
  		"\"links\":[" <LF>
  				("{\"source\":"t3=<INTEGER>{System.out.print("Source: " + t3.image);}
  				",\"target\":"t4=<INTEGER>{System.out.print("\t Target: " + t4.image);}
  				",\"value\":"t5=<INTEGER>{System.out.println("\t Value: " + t5.image);}"}," <LF> )*
			  //"{\"source\":"<INTEGER>",\"target\":"<INTEGER>",\"value\":"<INTEGER>"}" <LF>
   		"]"<LF>   		
   		
  "}" 
}