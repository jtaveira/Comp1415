/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JSON.jj */
/*@egen*/options{
	LOOKAHEAD=1;
}

PARSER_BEGIN(JSON)
public class JSON/*@bgen(jjtree)*/implements JSONTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTJSONState jjtree = new JJTJSONState();

/*@egen*/
	public static void main(String args[]) throws ParseException {
 		JSON parser = new JSON(System.in);
 		SimpleNode root = parser.Expression();

 		root.dump("");
 	}
}
PARSER_END(JSON)

SKIP :
{
" " | "\t" | "\r" | "\n"
}
// defini\u00c3\u00a7\u00c3\u00a3o dos tokens (s\u00c3\u00admbolos terminais)
TOKEN :
{
< INTEGER : (["0" - "9"])+ >
| < OPENB : "{" >
| < CLOSEB : "}" >
| < OPENA : "[" >
| < CLOSEA : "]" >
| < COMMA : "," >
| < COLON : ":" >
| < NODES : "\"nodes\"" >
| < LINKS : "\"links\"" >
| < NAME : "\"name\"" >
| < GROUP : "\"group\"" >
| < SOURCE : "\"source\"" >
| < TARGET : "\"target\"" >
| < VALUE : "\"value\"" >
| < STRING : "\""(["a" - "z", "A" - "Z", ".", "0" - "9"] )+"\"" >
}

SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	<OPENB> Expr1() Expr2() <CLOSEB>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr1():{/*@bgen(jjtree) Expr1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr1 */
        try {
/*@egen*/
	<NODES> <COLON> <OPENA> Expr3() <CLOSEA> <COMMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr2():{/*@bgen(jjtree) Expr2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr2 */
        try {
/*@egen*/
	<LINKS> <COLON> <OPENA> Expr4() <CLOSEA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr3():{/*@bgen(jjtree) Expr3 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr3 */
        try {
/*@egen*/
	Expr5() Expr7()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr4():{/*@bgen(jjtree) Expr4 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr4 */
        try {
/*@egen*/
	Expr6() Expr8()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr5():{/*@bgen(jjtree) Expr5 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr5 */
        try {
/*@egen*/
	<OPENB> <NAME> <COLON> <STRING> <COMMA> <GROUP> <COLON> <INTEGER> <CLOSEB>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr6():{/*@bgen(jjtree) Expr6 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr6 */
        try {
/*@egen*/
	<OPENB> <SOURCE> <COLON> <INTEGER> <COMMA> <TARGET> <COLON> <INTEGER> <COMMA> <VALUE> <COLON> <INTEGER> <CLOSEB>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr7():{/*@bgen(jjtree) Expr7 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr7 */
        try {
/*@egen*/
	[<COMMA> Expr5() Expr7()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr8():{/*@bgen(jjtree) Expr8 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR8);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr8 */
        try {
/*@egen*/
	[<COMMA> Expr6() Expr8()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}