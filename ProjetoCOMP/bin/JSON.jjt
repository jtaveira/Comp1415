options{
	LOOKAHEAD=1;
}

PARSER_BEGIN(JSON)
public class JSON{
	public static void main(String args[]) throws ParseException {
 		JSON parser = new JSON(System.in);
 		SimpleNode root = parser.Expression();
 	}
}
PARSER_END(JSON)

SKIP :
{
" " | "\t" | "\r" | "\n"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
< INTEGER : (["0" - "9"])+ >
| < OPENB : "{" >
| < CLOSEB : "}" >
| < OPENA : "[" >
| < CLOSEA : "]" >
| < COMMA : "," >
| < COLON : ":" >
| < NODES : "\"nodes\"" >
| < LINKS : "\"links\"" >
| < NAME : "\"name\"" >
| < GROUP : "\"group\"" >
| < SOURCE : "\"source\"" >
| < TARGET : "\"target\"" >
| < VALUE : "\"value\"" >
| < STRING : "\""(["a" - "z", "A" - "Z", ".", "0" - "9"] )+"\"" >
}

SimpleNode Expression(): {}{
	<OPENB> Expr1() Expr2() <CLOSEB>
}

void Expr1():{}{
	<NODES> <COLON> <OPENA> Expr3() <CLOSEA> <COMMA>
}

void Expr2():{}{
	<LINKS> <COLON> <OPENA> Expr4() <CLOSEA>
}

void Expr3():{}{
	Expr5() Expr7()
}

void Expr4():{}{
	Expr6() Expr8()
}

void Expr5():{}{
	<OPENB> <NAME> <COLON> <STRING> <COMMA> <GROUP> <COLON> <INTEGER> <CLOSEB>
}

void Expr6():{}{
	<OPENB> <SOURCE> <COLON> <INTEGER> <COMMA> <TARGET> <COLON> <INTEGER> <COMMA> <VALUE> <COLON> <INTEGER> <CLOSEB>
}

void Expr7():{}{
	[<COMMA> Expr5() Expr7()]
}

void Expr8():{}{
	[<COMMA> Expr6() Expr8()]
}